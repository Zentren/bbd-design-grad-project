/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.0.2).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Account;
import java.math.BigDecimal;
import org.openapitools.model.Transaction;
import org.openapitools.model.User;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-07-04T16:05:03.095817700+02:00[Africa/Harare]")

@Validated
@Api(value = "accounts", description = "the accounts API")
public interface AccountsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "Reverse transaction", nickname = "accountsAccountIdTransactionIdDelete", notes = "", authorizations = {
        @Authorization(value = "wallet_auth", scopes = {
            @AuthorizationScope(scope = "write:transaction", description = "modify transaction")
            })
    }, tags={ "Account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 402, message = "Invalid authentication") })
    @RequestMapping(value = "/accounts/{accountId}/{transactionId}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> accountsAccountIdTransactionIdDelete(@ApiParam(value = "",required=true) @PathVariable("accountId") BigDecimal accountId,@ApiParam(value = "",required=true) @PathVariable("transactionId") String transactionId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Create a new account", nickname = "addAccount", notes = "", authorizations = {
        @Authorization(value = "wallet_auth", scopes = {
            @AuthorizationScope(scope = "write:account", description = "modify account"),
            @AuthorizationScope(scope = "read:account", description = "read your account")
            })
    }, tags={ "Accounts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 403, message = "User doesn't exist or Account exists"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/accounts",
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> addAccount(@ApiParam(value = "" ,required=true )  @Valid @RequestBody User user) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Close account", nickname = "closeAccount", notes = "", authorizations = {
        @Authorization(value = "wallet_auth", scopes = {
            @AuthorizationScope(scope = "write:account", description = "modify account")
            })
    }, tags={ "Account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Invalid account ID"),
        @ApiResponse(code = 405, message = "Invalid authorisation") })
    @RequestMapping(value = "/accounts/{accountId}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> closeAccount(@ApiParam(value = "",required=true) @PathVariable("accountId") BigDecimal accountId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Create a new transaction", nickname = "createAccountTransaction", notes = "", authorizations = {
        @Authorization(value = "wallet_auth", scopes = {
            @AuthorizationScope(scope = "write:transaction", description = "modify transaction")
            })
    }, tags={ "Account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Invalid account ID"),
        @ApiResponse(code = 405, message = "Invalid authorisation") })
    @RequestMapping(value = "/accounts/{accountId}",
        consumes = { "application/Json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> createAccountTransaction(@ApiParam(value = "",required=true) @PathVariable("accountId") BigDecimal accountId,@ApiParam(value = ""  )  @Valid @RequestBody Account account) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Get all accounts", nickname = "getAccount", notes = "", response = Account.class, responseContainer = "List", authorizations = {
        @Authorization(value = "wallet_auth", scopes = {
            @AuthorizationScope(scope = "write:account", description = "modify account"),
            @AuthorizationScope(scope = "read:account", description = "read your account")
            })
    }, tags={ "Accounts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Account.class, responseContainer = "List"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/accounts",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Account>> getAccount() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"balance\" : 6,  \"closed\" : false,  \"accountNumber\" : 0,  \"transactions\" : [ \"transactions\", \"transactions\" ],  \"availableBalance\" : 1}");
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    ApiUtil.setExampleResponse(request, "application/xml", "<Account>  <accountNumber>123456789</accountNumber>  <balance>123456789</balance>  <availableBalance>123456789</availableBalance>  <closed>true</closed>  <transactions>aeiou</transactions></Account>");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Get details of account", nickname = "getAccountDetails", notes = "", response = Account.class, authorizations = {
        @Authorization(value = "wallet_auth", scopes = {
            @AuthorizationScope(scope = "write:account", description = "modify account"),
            @AuthorizationScope(scope = "read:account", description = "read your account")
            })
    }, tags={ "Account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Account.class),
        @ApiResponse(code = 400, message = "Invalid status value") })
    @RequestMapping(value = "/accounts/{accountId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Account> getAccountDetails(@ApiParam(value = "Status values that need to be considered for filter",required=true) @PathVariable("accountId") BigDecimal accountId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"balance\" : 6,  \"closed\" : false,  \"accountNumber\" : 0,  \"transactions\" : [ \"transactions\", \"transactions\" ],  \"availableBalance\" : 1}");
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    ApiUtil.setExampleResponse(request, "application/xml", "<Account>  <accountNumber>123456789</accountNumber>  <balance>123456789</balance>  <availableBalance>123456789</availableBalance>  <closed>true</closed>  <transactions>aeiou</transactions></Account>");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Get transaction details", nickname = "getUserTransactionDetails", notes = "", response = Transaction.class, authorizations = {
        @Authorization(value = "wallet_auth", scopes = {
            @AuthorizationScope(scope = "read:transaction", description = "read transaction")
            })
    }, tags={ "Account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Transaction.class) })
    @RequestMapping(value = "/accounts/{accountId}/{transactionId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Transaction> getUserTransactionDetails(@ApiParam(value = "",required=true) @PathVariable("accountId") BigDecimal accountId,@ApiParam(value = "",required=true) @PathVariable("transactionId") String transactionId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"toAccount\" : {    \"accountNumber\" : \"accountNumber\",    \"openingBalance\" : 0  },  \"settled\" : false,  \"fromAccount\" : {    \"accountNumber\" : \"accountNumber\",    \"openingBalance\" : 0  },  \"dateInitiation\" : \"2000-01-23T04:56:07.000+00:00\",  \"dateSettlement\" : \"2000-01-23T04:56:07.000+00:00\",  \"transactionId\" : \"transactionId\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
