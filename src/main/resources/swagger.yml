swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Petstore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "www.virtual-wallet.io"
basePath: "/api"
tags:
- name: "Accounts"
  description: "Everything about accounts"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "Account"
  description: "Everything about your account"
- name: "Users"
  description: "All about users"
- name: "User"
  description: "Everything about a user"
- name: "Transaction"
  description: "Everything about transactions"
schemes:
- "https"
paths:

  /users:

    get:
      tags:
        - "Users"
      summary: "Get all users"
      operationId: "getUsers"
      produces:
      - "application/json"
      responses:
        200:
          description: OK
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        402:
          description: "Invalid permission"
      security:
        - wallet_auth:
          - "read:users"

    post:
      tags:
        - "Users"
      summary: "Create new user"
      operationId: "createUser"
      parameters:
        - name: "body"
          in: "body"
          schema:
            $ref: "#/definitions/User"
      consumes:
        - "application/json"
      responses:
        200:
          description: OK
        402:
          description: "Invalid authentication"
        403:
          description: "User already exists"
      deprecated: false
      security:
        - wallet_auth:
          - "write:users"
  
  /users/{userId}:

    get:
      tags:
        - "User"
      summary: "User details"
      operationId: "getUser"
      produces:
      - "application/json"
      parameters:
        - name: "userId"
          type: "number"
          in: "path"
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/User"
      deprecated: false
      security:
        - wallet_auth:
          - "read-user"

    delete:
      tags:
        - "User"
      summary: "Delete user"
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
        - name: "userId"
          type: "number"
          in: "path"
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/User"
      deprecated: false
      security:
        - wallet_auth:
          - "write-user"
    
    post:
      tags:
        - "User"
      summary: "Create account for user"
      operationId: "createAccountForUser"
      produces:
      - "application/json"
      parameters:
        - name: "userId"
          type: "number"
          in: "path"
          required: true
        - in: "body"
          name: "account"
          schema:
            $ref: "#/definitions/Account"
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/User"
      deprecated: false
      security:
        - wallet_auth:
          - "write-user"
  
  /users/{userId}/{accountId}:

    get:
      tags:
        - "User"
      summary: "User Account details"
      operationId: "getUserAccount"
      produces:
      - "application/json"
      parameters:
        - name: "userId"
          type: "number"
          in: "path"
          required: true
        - name: "accountId"
          type: "number"
          in: "path"
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Account"
      deprecated: false
      security:
        - wallet_auth:
          - "read-account"
    
    delete:
      tags:
        - "User"
      summary: "Close User Account"
      operationId: "closeUserAccount"
      parameters:
        - name: "userId"
          type: "number"
          in: "path"
          required: true
        - name: "accountId"
          type: "number"
          in: "path"
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Account"
        405:
          description: "Invalid permission"
      deprecated: false
      security:
        - wallet_auth:
          - "write-account"
    
    post:
      tags:
        - "User"
      summary: "Create User Account Transaction"
      operationId: "createUserAccountTransaction"
      parameters:
        - name: "userId"
          type: "number"
          in: "path"
          required: true
        - name: "accountId"
          type: "number"
          in: "path"
          required: true
        - in: "body"
          name: "account"
          schema:
            $ref: "#/definitions/Account"
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Account"
        405:
          description: "Invalid permission"
      deprecated: false
      security:
        - wallet_auth:
          - "write-account"
  
  /users/{userId}/{accountId}/{transactionId}:

    get:
      tags:
        - "User"
      summary: "User Transaction details"
      operationId: "getUserTransaction"
      produces:
      - "application/json"
      parameters:
        - name: "userId"
          type: "number"
          in: "path"
          required: true
        - name: "accountId"
          type: "number"
          in: "path"
          required: true
        - name: "transactionId"
          type: "string"
          in: "path"
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Transaction"
      deprecated: false
      security:
        - wallet_auth:
          - "read-user"

    delete:
      tags:
        - "User"
      summary: "Reverse Transaction"
      operationId: "reverseUserTransaction"
      produces:
      - "application/json"
      parameters:
        - name: "userId"
          type: "number"
          in: "path"
          required: true
        - name: "accountId"
          type: "number"
          in: "path"
          required: true
        - name: "transactionId"
          type: "string"
          in: "path"
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Transaction"
      deprecated: false
      security:
        - wallet_auth:
          - "write-user"

  /accounts:

    post:
      tags:
      - "Accounts"
      summary: "Create a new account"
      description: ""
      operationId: "addAccount"
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
        - in: "body"
          name: "user"
          schema:
            $ref: "#/definitions/User"
          required: true
      produces:
      - "application/xml"
      - "application/json"
      responses:
        405:
          description: "Invalid input"
        403:
          description: "User doesn't exist or Account exists"
      security:
      - wallet_auth:
        - "write:account"
        - "read:account"

    get:
      tags:
      - "Accounts"
      summary: "Get all accounts"
      description: ""
      operationId: "getAccount"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: OK
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Account"
        405:
          description: "Invalid input"
      security:
      - wallet_auth:
        - "write:account"
        - "read:account"

  /accounts/{accountId}:

    get:
      tags:
      - "Account"
      summary: "Get details of account"
      description: ""
      operationId: "getAccountDetails"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "accountId"
        in: "path"
        description: "Status values that need to be considered for filter"
        required: true
        type: "number"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Account"
        400:
          description: "Invalid status value"
      security:
      - wallet_auth:
        - "write:account"
        - "read:account"

    delete:
      tags:
      - "Account"
      summary: "Close account"
      description: ""
      operationId: "closeAccount"
      parameters:
        - name: "accountId"
          type: "number"
          in: "path"
          required: true
      responses:
        200:
          description: OK
        400:
          description: "Invalid account ID"
        405:
          description: "Invalid authorisation"
      security:
        - wallet_auth:
          - "write:account"
    
    post:
      tags:
      - "Account"
      summary: "Create a new transaction"
      description: ""
      operationId: "createAccountTransaction"
      consumes:
      - "application/Json"
      parameters:
        - name: "accountId"
          type: "number"
          in: "path"
          required: true
        - in: "body"
          name: "account"
          schema:
            $ref: "#/definitions/Account"
      responses:
        200:
          description: OK
        400:
          description: "Invalid account ID"
        405:
          description: "Invalid authorisation"
      security:
        - wallet_auth:
          - "write:transaction"
      
  /accounts/{accountId}/{transactionId}:

    get:
      tags:
        - "Account"
      summary: "Get transaction details"
      operationId: "getUserTransactionDetails"
      produces:
      - "application/json"
      parameters:
        - name: "accountId"
          in: "path"
          required: true
          type: "number"
        - name: "transactionId"
          in: "path"
          type: "string"
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Transaction"
      deprecated: false
      security:
        - wallet_auth:
          - "read:transaction"

    delete:
      tags:
        - "Account"
      summary: "Reverse transaction"
      parameters:
        - name: "accountId"
          in: "path"
          required: true
          type: "number"
        - name: "transactionId"
          in: "path"
          type: "string"
          required: true
      responses:
        200:
          description: OK
        402:
          description: "Invalid authentication"
      deprecated: false
      security:
        - wallet_auth:
          - "write:transaction"

  /transactions:

    get:
      tags:
      - "Transaction"
      summary: "Get all transactions"
      description: ""
      operationId: "getTransactions"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Account"
        400:
          description: "Invalid status value"
      security:
      - wallet_auth:
        - "write:transactions"
        - "read:transactions"

    post:
      tags:
      - "Transaction"
      summary: "Create a new transaction"
      description: ""
      operationId: "createTransaction"
      consumes:
      - "application/Json"
      parameters:
        - in: "body"
          name: "body"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Account"
      responses:
        200:
          description: OK
        400:
          description: "Invalid account ID"
        405:
          description: "Invalid authorisation"
      security:
        - wallet_auth:
          - "write:transaction"
      
  /transactions/{transactionId}:

    get:
      tags:
        - "Transaction"
      summary: "Get transaction details"
      operationId: "getTransactionDetails"
      produces:
      - "application/json"
      parameters:
        - name: "transactionId"
          in: "path"
          type: "string"
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Transaction"
      deprecated: false
      security:
        - wallet_auth:
          - "read:transaction"

    delete:
      tags:
        - "Transaction"
      summary: "Reverse transaction"
      parameters:
        - name: "transactionId"
          in: "path"
          type: "string"
          required: true
      responses:
        200:
          description: OK
        402:
          description: "Invalid authentication"
      deprecated: false
      security:
        - wallet_auth:
          - "write:transaction"

  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
securityDefinitions:
  wallet_auth:
    type: "oauth2"
    authorizationUrl: "https://www.virtual-wallet.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:user: "modify user"
      read:user: "read user"
      write:account: "modify account"
      read:account: "read your account"
      write:transaction: "modify transaction"
      read:transaction: "read transaction"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  User:
    type: "object"
    properties:
      userId:
        type: "integer"
        format: "int64"
      firstName:
        type: "string"
      surname:
        type: "string"
      email:
        type: "string"
        format: "email"
      phoneNumber:
        type: "string"
      password:
        type: "string"
      accounts:
        type: "array"
        format: "number"
    xml:
      name: "User"
  Transaction:
    type: "object"
    properties:
      transactionId:
        type: "string"
      fromAccount:
        type: "object"
        properties:
          accountNumber:
            type: "string"
          openingBalance:
            type: "integer"
            format: "int64"
      toAccount:
        type: "object"
        properties:
          accountNumber:
            type: "string"
          openingBalance:
            type: "integer"
            format: "int64"
      dateInitiation:
        type: "string"
        format: "date-time"
      dateSettlement:
        type: "string"
        format: "date-time"
      settled:
        type: "boolean"
        default: false
    xml:
      name: "Transaction"
  Account:
    type: "object"
    properties:
      accountNumber:
        type: "integer"
        format: "int64"
      balance:
        type: "integer"
        format: "int64"
      availableBalance:
        type: "integer"
        format: "int64"
      closed:
        type: "boolean"
        default: false
      transactions:
        type: "array"
        format: "string"
    xml:
      name: "Account"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"